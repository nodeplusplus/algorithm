from typing import List


class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        h = {}

        for i in range(len(board)):
            for j in range(len(board)):

                num = board[i][j]
                if num == '.':
                    continue

                h_key = str(i//3)+str(j//3)
                if h_key in h.keys():
                    h_values = h[h_key]
                    if num in h_values:
                        return False
                    else:
                        h[h_key].append(num)
                else:
                    h[h_key] = [num]

                if num in h.keys():
                    [ikeys, jkeys] = h[num]
                    if i in ikeys or j in jkeys:
                        return False
                    else:
                        h[num][0].append(i)
                        h[num][1].append(j)
                else:
                    h[num] = [[i], [j]]

        return True


tests = [
    # (
    #     [
    #         ["5", "3", ".", ".", "7", ".", ".", ".", "."],
    #         ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    #         [".", "9", "8", ".", ".", ".", ".", "6", "."],
    #         ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    #         ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    #         ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    #         [".", "6", ".", ".", ".", ".", "2", "8", "."],
    #         [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    #         [".", ".", ".", ".", "8", ".", ".", "7", "9"]
    #     ],
    #     True
    # ),
    # (
    #     [
    #         ["5", "3", ".", ".", "7", ".", ".", ".", "7"],
    #         ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    #         [".", "9", "8", ".", ".", ".", ".", "6", "."],
    #         ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    #         ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    #         ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    #         [".", "6", ".", ".", ".", ".", "2", "8", "."],
    #         [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    #         [".", ".", ".", ".", "8", ".", ".", "7", "9"]
    #     ],
    #     False
    # ),
    (
        [
            ["8", "3", ".", ".", "7", ".", ".", ".", "."],
            ["6", ".", ".", "1", "9", "5", ".", ".", "."],
            [".", "9", "8", ".", ".", ".", ".", "6", "."],
            ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
            ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
            ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
            [".", "6", ".", ".", ".", ".", "2", "8", "."],
            [".", ".", ".", "4", "1", "9", ".", ".", "5"],
            [".", ".", ".", ".", "8", ".", ".", "7", "9"]
        ],
        False
    ),
    (
        [
            [".", ".", "5", ".", ".", ".", ".", ".", "."],
            ["1", ".", ".", "2", ".", ".", ".", ".", "."],
            [".", ".", "6", ".", ".", "3", ".", ".", "."],
            ["8", ".", ".", ".", ".", ".", ".", ".", "."],
            ["3", ".", "1", "5", "2", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "4", "."],
            [".", ".", "6", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "9", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", "."]
        ],
        False
    )
]


for A, r in tests:
    a = Solution().isValidSudoku(A)
    if a != r:
        print(f"\033[91m -> {a} # {r}")
    else:
        print(f"\033[92m -> OK")
